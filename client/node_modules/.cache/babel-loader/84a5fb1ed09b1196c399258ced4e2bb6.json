{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sandt\\\\code\\\\booksearch\\\\client\\\\src\\\\pages\\\\Search.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Search() {\n  _s();\n\n  // Setting our component's initial state\n  const [books, setBooks] = useState([]);\n  const [formObject, setFormObject] = useState({});\n  useEffect(() => {\n    loadBooks();\n  }, []);\n\n  function loadBooks() {\n    API.getBooks().then(res => setBooks(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Handles updating component state when the user types into the input field\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormObject({ ...formObject,\n      [name]: value\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      console.log(formObject);\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        description: formObject.description,\n        image: formObject.image,\n        link: formObject.link\n      }).then(res => loadBooks()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"What Books Should I Read?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"title\",\n            placeholder: \"Title (required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"author\",\n            placeholder: \"Author (required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"description\",\n            placeholder: \"Description (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"image\",\n            placeholder: \"Image (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"link\",\n            placeholder: \"Link (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n            disabled: !(formObject.author && formObject.title),\n            onClick: handleFormSubmit,\n            children: \"Submit Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Search, \"UqfM0h0i9og713UvocqePx2+GPk=\");\n\n_c = Search;\nexport default Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["C:/Users/sandt/code/booksearch/client/src/pages/Search.js"],"names":["React","useState","useEffect","Jumbotron","API","Col","Row","Container","Input","TextArea","FormBtn","Search","books","setBooks","formObject","setFormObject","loadBooks","getBooks","then","res","data","catch","err","console","log","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","title","author","saveBook","description","image","link"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/API\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nfunction Search() {\r\n    // Setting our component's initial state\r\n    const [books, setBooks] = useState([])\r\n    const [formObject, setFormObject] = useState({})\r\n\r\n  useEffect(() => {\r\n    loadBooks()\r\n  }, [])\r\n\r\n  function loadBooks() {\r\n    API.getBooks()\r\n      .then(res => \r\n        setBooks(res.data)\r\n      )\r\n      .catch(err => console.log(err));\r\n  };\r\n\r\n     // Handles updating component state when the user types into the input field\r\n     function handleInputChange(event) {\r\n        const { name, value } = event.target;\r\n        setFormObject({ ...formObject, [name]: value })\r\n    };\r\n\r\n    // When the form is submitted, use the API.saveBook method to save the book data\r\n    // Then reload books from the database\r\n    function handleFormSubmit(event) {\r\n        event.preventDefault();\r\n        if (formObject.title && formObject.author) {\r\n            console.log(formObject)\r\n            API.saveBook({\r\n                title: formObject.title,\r\n                author: formObject.author,\r\n                description: formObject.description,\r\n                image: formObject.image,\r\n                link: formObject.link\r\n            })\r\n                .then(res => loadBooks())\r\n                .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col size=\"md-6\">\r\n                    <Jumbotron>\r\n                        <h1>What Books Should I Read?</h1>\r\n                    </Jumbotron>\r\n                    <form>\r\n                        <Input\r\n                            onChange={handleInputChange}\r\n                            name=\"title\"\r\n                            placeholder=\"Title (required)\"\r\n                        />\r\n                        <Input\r\n                            onChange={handleInputChange}\r\n                            name=\"author\"\r\n                            placeholder=\"Author (required)\"\r\n                        />\r\n                        <TextArea\r\n                            onChange={handleInputChange}\r\n                            name=\"description\"\r\n                            placeholder=\"Description (Optional)\"\r\n                        />\r\n                        <TextArea\r\n                            onChange={handleInputChange}\r\n                            name=\"image\"\r\n                            placeholder=\"Image (Optional)\"\r\n                        />\r\n                        <TextArea\r\n                            onChange={handleInputChange}\r\n                            name=\"link\"\r\n                            placeholder=\"Link (Optional)\"\r\n                        />\r\n                        <FormBtn\r\n                            disabled={!(formObject.author && formObject.title)}\r\n                            onClick={handleFormSubmit}\r\n                        >\r\n                            Submit Book\r\n              </FormBtn>\r\n                    </form>\r\n                </Col>\r\n                </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default Search;"]},"metadata":{},"sourceType":"module"}