{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\sandt\\\\code\\\\booksearch\\\\client\\\\src\\\\pages\\\\Saved.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Books() {\n  _s();\n\n  // Setting our component's initial state\n  const [books, setBooks] = useState([]);\n  const [formObject, setFormObject] = useState({}); // Load all books and store them with setBooks\n\n  useEffect(() => {\n    loadBooks();\n  }, []); // Loads all books and sets them to books\n\n  function loadBooks() {\n    API.getBooks().then(res => setBooks(res.data)).catch(err => console.log(err));\n  }\n\n  ; // Deletes a book from the database with a given id, then reloads books from the db\n\n  function deleteBook(id) {\n    API.deleteBook(id).then(res => loadBooks()).catch(err => console.log(err));\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormObject({ ...formObject,\n      [name]: value\n    });\n  }\n\n  ; // When the form is submitted, use the API.saveBook method to save the book data\n  // Then reload books from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.title && formObject.author) {\n      API.saveBook({\n        title: formObject.title,\n        author: formObject.author,\n        description: formObject.description,\n        image: formObject.image,\n        link: formObject.link\n      }).then(res => loadBooks()).catch(err => console.log(err));\n    }\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fluid: true,\n    children: /*#__PURE__*/_jsxDEV(Row, {\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"What Books Should I Read?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          children: [/*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"title\",\n            placeholder: \"Title (required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Input, {\n            onChange: handleInputChange,\n            name: \"author\",\n            placeholder: \"Author (required)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"description\",\n            placeholder: \"Description (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"image\",\n            placeholder: \"Image (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextArea, {\n            onChange: handleInputChange,\n            name: \"link\",\n            placeholder: \"Link (Optional)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormBtn, {\n            disabled: !(formObject.author && formObject.title),\n            onClick: handleFormSubmit,\n            children: \"Submit Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        size: \"md-6 sm-12\",\n        children: [/*#__PURE__*/_jsxDEV(Jumbotron, {\n          children: /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Books On My List\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this), books.length ? /*#__PURE__*/_jsxDEV(List, {\n          children: books.map(book => /*#__PURE__*/_jsxDEV(ListItem, {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: \"/books/\" + book._id,\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [book.title, \" by \", book.author]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(DeleteBtn, {\n              onClick: () => deleteBook(book._id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)]\n          }, book._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"No Results to Display\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Books, \"UqfM0h0i9og713UvocqePx2+GPk=\");\n\n_c = Books;\nexport default Books;\n\nvar _c;\n\n$RefreshReg$(_c, \"Books\");","map":{"version":3,"sources":["C:/Users/sandt/code/booksearch/client/src/pages/Saved.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Books","books","setBooks","formObject","setFormObject","loadBooks","getBooks","then","res","data","catch","err","console","log","deleteBook","id","handleInputChange","event","name","value","target","handleFormSubmit","preventDefault","title","author","saveBook","description","image","link","length","map","book","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport DeleteBtn from \"../components/DeleteBtn\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\nimport API from \"../utils/\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Col, Row, Container } from \"../components/Grid\";\r\nimport { List, ListItem } from \"../components/List\";\r\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\r\n\r\nfunction Books() {\r\n    // Setting our component's initial state\r\n    const [books, setBooks] = useState([])\r\n    const [formObject, setFormObject] = useState({})\r\n\r\n    // Load all books and store them with setBooks\r\n    useEffect(() => {\r\n        loadBooks()\r\n    }, [])\r\n\r\n    // Loads all books and sets them to books\r\n    function loadBooks() {\r\n        API.getBooks()\r\n            .then(res =>\r\n                setBooks(res.data)\r\n            )\r\n            .catch(err => console.log(err));\r\n    };\r\n\r\n    // Deletes a book from the database with a given id, then reloads books from the db\r\n    function deleteBook(id) {\r\n        API.deleteBook(id)\r\n            .then(res => loadBooks())\r\n            .catch(err => console.log(err));\r\n    }\r\n\r\n    // Handles updating component state when the user types into the input field\r\n    function handleInputChange(event) {\r\n        const { name, value } = event.target;\r\n        setFormObject({ ...formObject, [name]: value })\r\n    };\r\n\r\n    // When the form is submitted, use the API.saveBook method to save the book data\r\n    // Then reload books from the database\r\n    function handleFormSubmit(event) {\r\n        event.preventDefault();\r\n        if (formObject.title && formObject.author) {\r\n            API.saveBook({\r\n                title: formObject.title,\r\n                author: formObject.author,\r\n                description: formObject.description,\r\n                image: formObject.image,\r\n                link: formObject.link\r\n            })\r\n                .then(res => loadBooks())\r\n                .catch(err => console.log(err));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Container fluid>\r\n            <Row>\r\n                <Col size=\"md-6\">\r\n                    <Jumbotron>\r\n                        <h1>What Books Should I Read?</h1>\r\n                    </Jumbotron>\r\n                    <form>\r\n                        <Input\r\n                            onChange={handleInputChange}\r\n                            name=\"title\"\r\n                            placeholder=\"Title (required)\"\r\n                        />\r\n                        <Input\r\n                            onChange={handleInputChange}\r\n                            name=\"author\"\r\n                            placeholder=\"Author (required)\"\r\n                        />\r\n                        <TextArea\r\n                            onChange={handleInputChange}\r\n                            name=\"description\"\r\n                            placeholder=\"Description (Optional)\"\r\n                        />\r\n                        <TextArea\r\n                            onChange={handleInputChange}\r\n                            name=\"image\"\r\n                            placeholder=\"Image (Optional)\"\r\n                        />\r\n                        <TextArea\r\n                            onChange={handleInputChange}\r\n                            name=\"link\"\r\n                            placeholder=\"Link (Optional)\"\r\n                        />\r\n                        <FormBtn\r\n                            disabled={!(formObject.author && formObject.title)}\r\n                            onClick={handleFormSubmit}\r\n                        >\r\n                            Submit Book\r\n              </FormBtn>\r\n                    </form>\r\n                </Col>\r\n                <Col size=\"md-6 sm-12\">\r\n                    <Jumbotron>\r\n                        <h1>Books On My List</h1>\r\n                    </Jumbotron>\r\n                    {books.length ? (\r\n                        <List>\r\n                            {books.map(book => (\r\n                                <ListItem key={book._id}>\r\n                                    <Link to={\"/books/\" + book._id}>\r\n                                        <strong>\r\n                                            {book.title} by {book.author}\r\n                                        </strong>\r\n                                    </Link>\r\n                                    <DeleteBtn onClick={() => deleteBook(book._id)} />\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    ) : (\r\n                            <h3>No Results to Display</h3>\r\n                        )}\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n}\r\n\r\n\r\nexport default Books;\r\n"]},"metadata":{},"sourceType":"module"}